#!/usr/bin/env bash
### end common-components/bash-shebang

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  local INSTALLED=$(brew ls --versions "$NAME" | awk '{print $NF}')
  local LATEST=$(brew info "$NAME" 2>/dev/null | head -1 | awk '{gsub(/,/, ""); print $3}')

  [ "$INSTALLED" != "$LATEST" ]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}
### end mac-components/mac-functions

if ! command -v brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/homebrew/go/install)

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      printf '\n# recommended by brew doctor\n' >> ~/.zshrc
      printf 'export PATH="/usr/local/bin:$PATH"\n' >> ~/.zshrc
      export PATH="/usr/local/bin:$PATH"
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
### end mac-components/homebrew

fancy_echo "Installing zsh"
  brew_install_or_upgrade 'zsh'
### end mac-components/zsh

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)
### end common-components/zsh

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

if ! command -v rcup &>/dev/null; then
  fancy_echo "Installing rcm, to manage your dotfiles ..."
    brew tap thoughtbot/formulae
    brew_install_or_upgrade 'rcm'
else
  fancy_echo "rcm already installed. Skipping ..."
fi
### end mac-components/rcm

if [ ! -d $HOME/dotfiles ]; then
  fancy_echo "Setting up groupbuddies' dotfiles"
    git clone git://github.com/groupbuddies/dotfiles.git $HOME/dotfiles
fi

if [ ! -d $HOME/dotfiles-local ]; then
  fancy_echo "Setting up my dotfiles"
    git clone git://github.com/azevedo-252/dotfiles.git $HOME/dotfiles-local
fi

if [ ! -e $HOME/.rcrc ]; then
  fancy_echo "Copying .rcrc to the home folder"
    cp $HOME/dotfiles-local/rcrc $HOME/.rcrc
fi

fancy_echo "Creating dotfiles symlinks into the home folder"
  rcup
### end common-components/dotfiles

fancy_echo "Installing Postgres, a good open source relational database ..."
  brew_install_or_upgrade 'postgres' '--no-python'

fancy_echo "Installing Redis, a good key-value database ..."
  brew_install_or_upgrade 'redis'

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'vim'

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew_install_or_upgrade 'ctags'

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew_install_or_upgrade 'tmux'

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew_install_or_upgrade 'reattach-to-user-namespace'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brew_install_or_upgrade 'qt'

node_version="0.10"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ..."
  brew_install_or_upgrade 'nvm'

  if ! grep -qs 'source $(brew --prefix nvm)/nvm.sh' ~/.zshrc; then
    printf 'export PATH="$PATH:/usr/local/lib/node_modules"\n' >> ~/.zshrc
    printf 'source $(brew --prefix nvm)/nvm.sh\n' >> ~/.zshrc
  fi

  source $(brew --prefix nvm)/nvm.sh
  nvm install "$node_version"

  fancy_echo "Setting $node_version as the global default nodejs..."
  nvm alias default "$node_version"

fancy_echo "Installing karma, a TestRunner for Javascript"
  sudo npm install -g karma-cli

fancy_echo "Installing gpg, for encrypting and signing your data and communication"
  brew_install_or_upgrade 'gpg'

fancy_echo "Installing mongodb"
  brew_install_or_upgrade 'mongodb'
### end mac-components/packages

fancy_echo "Adding and installing caskroom/cask to homebrew"
  brew tap caskroom/cask
  brew_install_or_upgrade 'brew-cask'

fancy_echo "Installing development tools from homebrew ..."
  brew cask install iterm2
  brew cask install google-chrome
  brew cask install firefox
  brew cask install slack
  brew cask install hipchat
  brew cask install alfred

fancy_echo "Installing other recreational tools from homebrew ..."
  brew cask install dropbox
  brew cask install spotify
  brew cask install skype
  brew cask install vlc
  brew cask install subtitles
  brew cask install transmission
  brew cask install tvshows
  brew cask install caffeine
  brew cask install spectacle
  brew cask install bettertouchtool
### end mac-components/homebrew-cask

fancy_echo "Starting Postgres ..."
  brew_launchctl_restart postgresql
### end mac-components/start-services

fancy_echo "Installing rvm, to change Ruby versions ..."
  curl -sSL https://get.rvm.io | bash -s stable --rails
### end mac-components/rvm

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force
### end mac-components/compiler-and-libraries

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
### end mac-components/bundler

fancy_echo "Installing Heroku CLI client ..."
  brew_install_or_upgrade 'heroku-toolbelt'

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git

fancy_echo "Installing foreman ..."
  curl -sLo /tmp/foreman.pkg http://assets.foreman.io/foreman/foreman.pkg && \
  sudo installer -pkg /tmp/foreman.pkg -tgt /
### end mac-components/heroku

fancy_echo "Installing GitHub CLI client ..."
  brew_install_or_upgrade 'hub'
### end mac-components/github

